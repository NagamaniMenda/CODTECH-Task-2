import java.util.*;

class HospitalManagementSystem
{

    static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args)
{
        Hospital hospital = new Hospital("City HealthCare");
        System.out.println("Welcome to " + hospital.getName());
        hospital.showMenu();
    }
}

class Hospital 
{
    private String name;
    private List<Patient> patients;
    private List<Staff> staffMembers;
    private List<Appointment> appointments;
    private List<MedicalSupply> inventory;
static Scanner scanner = new Scanner(System.in);

    public Hospital(String name)
{
        this.name = name;
        this.patients = new ArrayList<>();
        this.staffMembers = new ArrayList<>();
        this.appointments = new ArrayList<>();
        this.inventory = new ArrayList<>();
    }

    public String getName()
{
        return name;
    }

    public void showMenu()
{
        while (true) 
{
            System.out.println("\nMain Menu:");
            System.out.println("1. Patient Registration");
            System.out.println("2. Appointment Scheduling");
            System.out.println("3. View Electronic Health Records (EHR)");
            System.out.println("4. Billing and Invoicing");
            System.out.println("5. Inventory Management");
            System.out.println("6. Staff Management");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");

            int choice = Integer.parseInt(scanner.nextLine());
            switch (choice)
{
                case 1 -> registerPatient();
                case 2 -> scheduleAppointment();
                case 3 -> viewEHR();
                case 4 -> handleBilling();
                case 5 -> manageInventory();
                case 6 -> manageStaff();
                case 7 ->
{
                    System.out.println("Exiting... Goodbye!");
                    return;
                }
                default -> System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private void registerPatient()
{
        System.out.println("\nPatient Registration:");
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();
        System.out.print("Enter patient age: ");
        int age = Integer.parseInt(scanner.nextLine());
        System.out.print("Enter patient contact number: ");
        String contact = scanner.nextLine();

        Patient patient = new Patient(name, age, contact);
        patients.add(patient);
        System.out.println("Patient registered successfully with ID: " + patient.getId());
    }

    private void scheduleAppointment()
{
        System.out.println("\nAppointment Scheduling:");
        System.out.print("Enter patient ID: ");
        int patientId = Integer.parseInt(scanner.nextLine());
        System.out.print("Enter appointment date (YYYY-MM-DD): ");
        String date = scanner.nextLine();
        System.out.print("Enter appointment time (HH:MM): ");
        String time = scanner.nextLine();
        System.out.print("Enter doctor's name: ");
        String doctor = scanner.nextLine();

        Appointment appointment = new Appointment(patientId, date, time, doctor);
        appointments.add(appointment);
        System.out.println("Appointment scheduled successfully.");
    }

    private void viewEHR()
{
        System.out.println("\nElectronic Health Records (EHR):");
        System.out.print("Enter patient ID: ");
        int patientId = Integer.parseInt(scanner.nextLine());
        for (Patient patient : patients)
{
            if (patient.getId() == patientId) 
{
                System.out.println(patient);
                return;
            }
        }
        System.out.println("Patient not found.");
    }

    private void handleBilling()
{
        System.out.println("\nBilling and Invoicing:");
        System.out.print("Enter patient ID: ");
        int patientId = Integer.parseInt(scanner.nextLine());
        System.out.print("Enter bill amount: ");
        double amount = Double.parseDouble(scanner.nextLine());

        System.out.println("Bill generated successfully.");
        System.out.println("Patient ID: " + patientId);
        System.out.println("Amount: $" + amount);
    }

    private void manageInventory()
{
        System.out.println("\nInventory Management:");
        System.out.println("1. Add Medical Supply");
        System.out.println("2. View Inventory");
        System.out.print("Enter your choice: ");
        int choice = Integer.parseInt(scanner.nextLine());

        switch (choice) 
{
            case 1 -> 
{
                System.out.print("Enter supply name: ");
                String name = scanner.nextLine();
                System.out.print("Enter quantity: ");
                int quantity = Integer.parseInt(scanner.nextLine());

                inventory.add(new MedicalSupply(name, quantity));
                System.out.println("Medical supply added successfully.");
            }
            case 2 -> 
{
                System.out.println("\nInventory:");
                for (MedicalSupply supply : inventory)
{
                    System.out.println(supply);
                }
            }
            default -> System.out.println("Invalid choice.");
        }
    }

    private void manageStaff()
{
        System.out.println("\nStaff Management:");
        System.out.print("Enter staff name: ");
        String name = scanner.nextLine();
        System.out.print("Enter role: ");
        String role = scanner.nextLine();
        
        Staff staff = new Staff(name, role);
        staffMembers.add(staff);
        System.out.println("Staff member added successfully with ID: " + staff.getId());
    }
}

class Patient
{
    private static int idCounter = 1;
    private int id;
    private String name;
    private int age;
    private String contact;

    public Patient(String name, int age, String contact)
{
        this.id = idCounter++;
        this.name = name;
        this.age = age;
        this.contact = contact;
    }

    public int getId()
{
        return id;
    }

    @Override
    public String toString()
{
        return "Patient ID: " + id + ", Name: " + name + ", Age: " + age + ", Contact: " + contact;
    }
}

class Staff
{
    private static int idCounter = 1;
    private int id;
    private String name;
    private String role;

    public Staff(String name, String role)
{
        this.id = idCounter++;
        this.name = name;
        this.role = role;
    }

    public int getId() 
{
        return id;
    }

    @Override
    public String toString()
{
        return "Staff ID: " + id + ", Name: " + name + ", Role: " + role;
    }
}

class Appointment 
{
    private int patientId;
    private String date;
    private String time;
    private String doctor;

    public Appointment(int patientId, String date, String time, String doctor)
{
        this.patientId = patientId;
        this.date = date;
        this.time = time;
        this.doctor = doctor;
    }

    @Override
    public String toString()
{
        return "Appointment [Patient ID: " + patientId + ", Date: " + date + ", Time: " + time + ", Doctor: " + doctor + "]";
    }
}

class MedicalSupply 
{
    private String name;
    private int quantity;

    public MedicalSupply(String name, int quantity) 
{
        this.name = name;
        this.quantity = quantity;
    }

    @Override
    public String toString() 
{
        return "Medical Supply [Name: " + name + ", Quantity: " + quantity + "]";
    }
}
class Inventory
{
   
    private Map<String, Integer> items;

    public Inventory()
{
        items = new HashMap<>();
        items.put("Syringes", 100);
        items.put("Gloves", 200);
        items.put("Masks", 300);
    }

    public void displayItems()
{
        System.out.println("\n--- Inventory Items ---");
        for (Map.Entry<String, Integer> entry : items.entrySet())
{
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }

    public void updateItem(String name, int quantity)
{
        if (items.containsKey(name))
{
            items.put(name, quantity);
            System.out.println("Inventory updated.");
        }
else 
{
            System.out.println("Item not found in inventory.");
        }
    }
}

